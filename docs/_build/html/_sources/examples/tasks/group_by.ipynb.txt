{
 "cells": [
  {
   "cell_type": "markdown",
   "source": [
    "# _Group by_"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "A simple example where we can find how **group by** task works. This task is able with command-line.\n"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "outputs": [],
   "source": [
    "from os.path import dirname\n",
    "from os import getcwd\n",
    "from openvariant import group_by\n",
    "\n",
    "dataset_folder = f'{dirname(getcwd())}/datasets/sample2'\n",
    "annotation_path = f'{dirname(getcwd())}/datasets/sample2/annotation.yaml'"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "`group_by` task allows us to group the rows depending on the value of an output field.\n",
    "\n",
    "- `base_path` - Input path to explore and parse.\n",
    "- `annotation_path` - Path of the annotation path.\n",
    "- `script` - Command-line to execute with the result of the parsing.\n",
    "- `key_by` - Key to group rows.\n",
    "- `where` - Filter expression.\n",
    "- `cores` - Maximum processes to run in parallel.\n",
    "- `quite` - Do not show the progress meanwhile the parsing is running.\n",
    "- `header` - Show header on the result.\n",
    "\n",
    "On the following example we can see a general case for `group by` task:"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Group: MESO\n",
      "ACAP3\t1p36.33\tMESO\n",
      "ACTRT2\t1p36.32\tMESO\n",
      "AGRN\t1p36.33\tMESO\n",
      "ANKRD65\t1p36.33\tMESO\n",
      "ATAD3A\t1p36.33\tMESO\n",
      "ATAD3B\t1p36.33\tMESO\n",
      "ATAD3C\t1p36.33\tMESO\n",
      "AURKAIP1\t1p36.33\tMESO\n",
      "B3GALT6\t1p36.33\tMESO\n",
      "\n",
      "\n",
      "Group: ACC\n",
      "ACAP3\t1p36.33\tACC\n",
      "ACTRT2\t1p36.32\tACC\n",
      "AGRN\t1p36.33\tACC\n",
      "ANKRD65\t1p36.33\tACC\n",
      "ATAD3A\t1p36.33\tACC\n",
      "ATAD3B\t1p36.33\tACC\n",
      "ATAD3C\t1p36.33\tACC\n",
      "AURKAIP1\t1p36.33\tACC\n",
      "B3GALT6\t1p36.33\tACC\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "for group, values, script_used in group_by(base_path=dataset_folder, annotation_path=annotation_path, script=None, key_by=\"CANCER\", quite=True):\n",
    "    print(f'Group: {group}')\n",
    "    for row in values:\n",
    "        print(row)\n",
    "    print(\"\\n\")"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "One of the parameters on `count` task is `where`. You will be able to apply a conditional filter. The possible operations can be:\n",
    "\n",
    "+ `==` - Equal.\n",
    "+ `!=` - Not equal.\n",
    "+ `<=` - Less or equal than.\n",
    "+ `<` - Less than.\n",
    "+ `>=` - More or equal than.\n",
    "+ `>` - More than.\n",
    "\n",
    "One example of this parameter is the following one:"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Group: MESO\n",
      "ATAD3C\t1p36.33\tMESO\n",
      "\n",
      "\n",
      "Group: ACC\n",
      "ATAD3C\t1p36.33\tACC\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "for group, values, script_used in group_by(base_path=dataset_folder, annotation_path=annotation_path, script=None,where=\"SYMBOL == 'ATAD3C'\", key_by=\"CANCER\", quite=True):\n",
    "    print(f'Group: {group}')\n",
    "    for row in values:\n",
    "        print(row)\n",
    "    print(\"\\n\")"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Also, on `group by` task, there is `script` parameter which will allow to the user to execute a command shell on the parsed result. In the following example we can see how many characters there are in each group of the parsed output:"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Group: MESO\n",
      "181\n",
      "\n",
      "\n",
      "Group: ACC\n",
      "172\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "for group, values, script_used in group_by(base_path=dataset_folder, annotation_path=annotation_path, script=\"wc -m\", key_by=\"CANCER\", quite=True):\n",
    "    print(f'Group: {group}')\n",
    "    for row in values:\n",
    "        print(row)\n",
    "    print(\"\\n\")"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}